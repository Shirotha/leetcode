/*
    Given the root of a binary tree, return the average value of the nodes on each level in the form of an array. Answers within 10-5 of the actual answer will be accepted.

    Constraints:

    The number of nodes in the tree is in the range [1, 10^4].
    -2^31 <= Node.val <= 2^31 - 1
 */

#[derive(Debug, PartialEq, Eq)]
pub struct TreeNode {
    pub val: i32,
    pub left: Option<Rc<RefCell<TreeNode>>>,
    pub right: Option<Rc<RefCell<TreeNode>>>,
}

impl TreeNode {
    #[inline]
    pub fn new(val: i32) -> Self {
        TreeNode {
            val,
            left: None,
            right: None
        }
    }
}

pub struct Solution;

use std::{
    rc::Rc,
    cell::RefCell,
    collections::VecDeque,
};

impl Solution {
    pub fn average_of_levels(mut root: Option<Rc<RefCell<TreeNode>>>) -> Vec<f64> {
    let mut average = Vec::new();
    let mut count = Vec::new();
    let mut stack = VecDeque::new();
    let mut last = None;
    while !stack.is_empty() || root.is_some() {
        while let Some(node) = root.take() {
            root = node.borrow().left.clone();
            stack.push_back(node);
        }
        let node = stack.back().unwrap();
        let node = node.borrow();
        if node.right.is_some() && last != node.right {
            root = node.right.clone();
        } else {
            let d = stack.len();
            if average.len() < d { 
                average.resize(d, 0.0);
                count.resize(d, 0);
            }
            average[d - 1] += node.val as f64;
            count[d - 1] += 1;
            drop(node);
            last = stack.pop_back().clone();
        }
    }
    average.iter_mut().zip(count.into_iter())
        .for_each( |(a, n)| *a /= n as f64  );
    average
    }
}

#[cfg(test)]
mod test {
    use super::*;
    use std::collections::VecDeque;

    fn slice_to_tree(slice: &[i32], null: i32) -> Option<Rc<RefCell<TreeNode>>> {
        if slice.is_empty() { return None; }
        let mut queue = VecDeque::new();
        let mut index = 0;
        let root = Rc::new(RefCell::new(TreeNode::new(slice[index])));
        queue.push_back(root.clone());
        while !queue.is_empty() {
            let node = queue.pop_front().unwrap();
            let mut node = node.borrow_mut();
            index += 1;
            if index >= slice.len() { break; }
            {
                let left = slice[index];
                if left != null {
                    let left = Rc::new(RefCell::new(TreeNode::new(left)));
                    queue.push_back(left.clone());
                    node.left = Some(left);
                }
            }
            index += 1;
            if index >= slice.len() { break; }
            {
                let right = slice[index];
                if right != null {
                    let right = Rc::new(RefCell::new(TreeNode::new(right)));
                    queue.push_back(right.clone());
                    node.right = Some(right);
                }
            }
        }
        Some(root)
    }

    fn judge(a: &[f64], b: &[f64]) {
        assert_eq!(a.len(), b.len());
        for (i, (&x, &y)) in a.iter().zip(b.iter()).enumerate() {
            if !(y - 1e-5 < x && x < y + 1e-5) { 
                panic!("error at level {}: {} - {} = {}", i + 1, x, y, x - y); 
            }    
        }
    }

    /*
        Input: root = [3,9,20,null,null,15,7]
        Output: [3.00000,14.50000,11.00000]
        Explanation: The average value of nodes on level 0 is 3, on level 1 is 14.5, and on level 2 is 11.
        Hence return [3, 14.5, 11].
    */
    #[test]
    fn example1() {
        let root = slice_to_tree(&[3,9,20,-1,-1,15,7], -1);

        let a = Solution::average_of_levels(root);

        judge(&a, &[3.0,14.5,11.0]);
    }

    /*
        Input: root = [3,9,20,15,7]
        Output: [3.00000,14.50000,11.00000]
    */
    #[test]
    fn example2() {
        let root = slice_to_tree(&[3,9,20,15,7], -1);

        let a = Solution::average_of_levels(root);

        judge(&a, &[3.0,14.5,11.0]);
    }

    /*
        Input: root = [-40,0,-37,17,-87,-13,62,82,-57,45,-52,3,-22,-55,-54,11,-2,60,69,-21,23,36,-100,6,-80,93,-55,67,78,-22,-70,-44,null,17,-38,77,-13,97,-22,66,-42,89,-69,-51,-2,-16,-72,-29,-49,-13,76,null,null,-56,-79,-4,84,-79,-71,-58,null,-59,71,-20,38,null,null,27,-47,46,42,-19,66,84,-4,null,null,null,null,null,null,78,-28,-3,12,21,-27,null,39,-15,-99,51,-14,38,78,56,-24,58,59,42,24,-26,18,-63,null,-3,77,null,null,-52,null,74,-55,null,-91,-80,-86,-23,null,11,-60,-84,null,null,null,null,null,-59,-45,-13,null,90,-3,-38,-5,1,-1,-90,null,53,-57,-25,32,-94,-52,-31,-90,65,85,23,62,null,null,70,-15,22,-37,7,26,81,94,23,48,-82,96,-91,-12,67,5,61,59,25,-45,-25,88,-20,64,-18,-55,42,-59,21,-69,-2,-36,34,17,null,null,-20,14,41,19,null,null,84,-55,-68,-88,98,-29,-46,10,97,-92,10,null,null,98,-31,76,null,null,-29,null,-12,-52,-21,-14,59,75,31,null,89,null,70,null,4,null,61,53,62,23,25,27,-62,-52,null,-99,null,null,88,88,63,null,null,null,null,null,-43,null,-92,23,-49,53,68,-44,-73,-95,81,21,-77,39,-41,-62,3,25,null,null,null,null,null,-44,null,null,63,null,-54,-13,null,null,-83,52,-57,29,78,62,83,null,54,null,74,53,null,8,33,66,32,21,null,51,-94,25,5,16,null,-81,null,null,null,null,null,null,-28,17,76,18,85,null,-65,null,null,null,null,null,75,null,-26,49,69,-9,-51,null,-11,null,null,3,-38,0,-61,-43,60,null,null,79,null,-84,null,null,-81,-38,-43,20,-97,-72,null,null,null,53,38,null,69,null,-67,38,null,null,null,null,null,-67,-91,-96,81,44,null,null,-97,null,null,null,33,51,60,null,null,null,null,49,null,null,-6,null,-63,null,null,71,null,null,null,-34,null,null,-58,98,50,-85,6,23,-34,93,-52,83,20,-9,33,null,-26,-85,-36,-56,26,-13,-35,-73,-17,-97,-42,86,42,null,95,67,null,63,null,null,null,null,25,null,null,null,null,-90,-59,8,86,null,null,null,-89,19,31,68,-32,null,null,-84,null,null,-59,null,null,86,-56,null,null,-20,-26,-11,37,null,12,null,null,null,-9,80,null,-27,null,58,-37,null,73,null,null,null,-70,-75,-17,null,null,null,null,null,-46,null,null,15,null,-75,74,43,54,43,-35,null,-14,null,-22,null,null,null,null,-96,66,null,-8,-8,null,null,null,null,-74,null,-43,-33,25,null,-43,-49,98,97,-36,46,null,-81,-62,-2,null,null,null,null,null,-53,-6,-59,null,null,null,null,-16,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,-49,12,22,98,null,null,null,45,33,0,null,null,-95,91,-80,-88,-17,null,83,38,null,-99,-21,null,null,-81,-61,87,41,-35,37,19,-37,-12,7,null,-52,-93,62,-31,-18,-57,-29,-67,-73,57,3,-33,null,-79,-74,94,2,null,-85,-87,95,null,null,null,null,63,null,null,null,null,null,18,null,-74,null,-3,-96,null,46,27,-26,82,24,-96,null,null,null,null,46,null,null,null,null,37,null,null,null,4,-5,9,11,-86,null,-13,null,null,null,-68,null,null,6,null,null,null,null,null,null,null,null,null,null,null,71,24,3,null,-74,null,null,null,null,-66,-61,82,-47,null,null,null,93,null,null,null,null,61,null,-71,null,null,null,null,null,null,null,null,null,null,null,-93,64,-67,null,97,45,null,null,null,null,null,32,-61,null,-53,null,-14,-9,-91,null,93,-71,null,null,42,null,null,null,null,57,null,null,null,null,null,-2,null,null,-1,43,null,null,null,-30,null,null,50,36,89,-72,null,86,-7,-87,-94,72,null,2,71,7,null,null,null,45,-6,-2,-79,8,32,36,-98,-40,77,0,null,-19,null,29,78,null,null,-58,null,47,86,null,null,90,null,null,-14,null,-1,null,-65,49,null,null,72,70,null,null,null,null,null,90,null,null,-51,50,-73,-46,-34,5,7,null,null,35,null,null,null,null,null,null,32,null,null,null,null,-41,99,null,-98,-90,null,45,null,null,null,null,null,99,null,-6,null,null,null,-20,null,null,38,2,21,78,null,null,null,null,-30,null,null,-36,null,-5,68,null,40,-33,-92,null,null,17,null,null,83,null,null,null,null,33,null,null,null,null,-20,-95,null,null,-68,null,-9,-9,7,21,-47,71,-97,null,null,null,30,null,null,-69,null,null,-42,null,-65,null,40,98,null,null,6,null,-27,95,-26,-100,null,null,75,null,6,-77,null,null,null,null,-14,null,null,70,null,null,80,null,null,null,null,null,null,null,-59,null,74,null,30,null,-71,29,null,-4,-8,-55,-79,-91,19,14,34,null,-62,null,5,22,-38,null,null,null,null,null,null,-57,null,null,null,null,51,8,14,-17,-7,-79,-65,-68,69,50,-100,91,-1,66,31,28,null,19,-50,62,23,4,17,-83,-84,2,-22,null,null,null,null,null,9,37,-79,null,23,null,null,null,null,null,-74,11,-2,null,null,null,null,null,null,null,null,-74,null,null,-78,null,30,null,-82,null,-51,null,null,null,null,null,59,-90,null,-8,null,null,null,null,null,88,null,3,null,null,null,null,57,null,null,null,null,null,null,null,-26,null,null,-62,null,null,null,null,75,null,null,null,83,52,null,-31,null,null,-78,null,-71,9,87,34,null,51,28,null,null,-54,14,null,null,-25,-11,80,null,null,-20,-40,null,null,null,null,-28,null,null,null,-94,-46,null,-3,null,37,-70,-22,null,null,-89,-28,1,83,41,18,-9,null,-46,61,null,89,-17,-29,null,-32,-78,-20,15,null,72,null,-38,7,null,null,null,-13,50,-81,null,26,70,-94,null,null,-76,-3,52,20,null,91,40,91,null,null,null,null,null,null,32,null,null,null,40,37,29,-53,-45,-98,-57,-53,null,null,null,7,93,-37,-64,-65,null,92,-47,58,13,null,null,null,null,null,67,-48,null,-33,-46,null,null,null,-65,null,null,null,null,null,-49,-85,-58,null,null,62,null,null,null,null,null,null,null,null,-33,null,null,null,-47,null,null,null,null,null,null,-37,null,null,-91,-100,null,null,null,null,null,-59,null,27,null,null,null,42,null,null,null,null,-59,null,null,null,-25,38,20,-60,null,null,null,-1,-16,null,null,null,null,null,null,-15,-10,75,27,86,-2,-43,38,null,null,-82,null,null,null,null,null,80,75,60,89,-11,null,null,null,15,-93,75,55,-89,null,null,null,null,51,-40,null,null,-22,null,null,null,null,-49,-24,68,null,null,85,78,null,null,-96,29,51,74,-93,null,null,36,-26,null,null,3,-65,null,65,null,70,null,null,null,-81,-74,87,null,null,null,-54,39,99,-72,null,null,8,-14,null,null,null,null,-96,90,null,null,51,-61,null,-67,null,null,null,-65,null,null,-41,21,null,null,null,null,51,null,null,null,null,null,null,null,null,null,null,-26,null,null,null,-95,-52,null,null,null,null,null,null,null,null,null,null,null,97,null,-73,null,76,-52,4,null,null,57,-85,43,64,null,null,null,null,null,null,null,62,41,-100,-64,null,75,null,-99,null,-43,null,null,-64,-23,-68,null,null,null,71,-12,-62,93,18,null,-3,-66,96,-99,30,null,32,-41,-25,null,null,41,null,null,null,null,null,null,-32,-56,-32,0,null,49,null,null,null,null,-85,-60,53,null,null,null,-90,99,6,62,null,null,-52,null,null,null,-51,-4,null,null,null,-94,-94,null,-48,null,null,null,null,99,null,null,null,-93,null,-63,14,null,null,-83,32,null,41,null,null,74,null,null,null,null,49,null,80,null,null,null,null,null,null,null,null,null,null,50,null,-53,null,-71,null,null,null,null,null,null,null,null,-71,-51,48,null,null,31,null,null,26,7,null,null,-60,null,null,null,22,null,null,90,null,null,83,null,null,-84,-100,-18,null,null,null,-81,null,-9,-60,null,-97,null,-56,46,-56,88,-26,null,null,-76,null,95,null,null,null,53,-34,null,7,65,null,null,null,-63,-44,16,null,null,-28,null,-40,89,5,-87,-95,99,11,-18,-13,59,null,null,null,null,13,19,null,-24,70,91,null,20,16,null,null,null,null,null,null,null,94,null,null,null,null,62,null,null,null,null,null,null,38,null,68,14,42,null,null,84,75,null,56,null,-58,null,89,-72,15,-59,-98,-66,null,33,-33,27,-13,null,null,null,null,77,null,null,null,null,-39,null,94,-29,null,null,null,null,null,null,53,null,-73,88,null,null,null,null,null,35,null,null,null,57,53,null,-47,null,77,9,null,-17,-16,null,41,-48,60,89,78,-75,null,null,10,-89,39,null,-41,null,null,null,-21,84,null,null,56,12,null,64,null,null,null,null,null,null,null,null,null,null,84,null,null,null,null,null,null,null,null,null,null,null,null,84,-75,null,null,null,-23,null,null,null,null,null,null,null,61,null,null,89,null,null,null,null,null,null,-40,null,null,null,null,-57,null,null,null,null,-95,null,null,null,-97,null,null,null,null,null,null,null,-77,0,null,null,null,null,null,null,null,null,-30,null,null,67,-56,52,null,-29,null,null,-20,81,null,-55,-27,74,79,32,null,null,-33,-17,96,null,null,null,null,null,null,null,86,-16,null,null,null,null,-68,null,null,null,null,null,null,34,null,null,null,10,null,null,null,null,null,null,null,null,null,null,null,-85,null,56,22,-5,-77,null,null,null,null,-82,null,null,null,null,null,null,null,null,null,81,null,null,null,51,null,null,-22,null,null,null,null,null,null,null,null,null,null,-82,null,72,null,null,null,-30,1,null,null,null,-37,null,null,null,null,-85,null,null,null,null,null,null,null,null,null,null,null,3]
        Output: [-40.00000,-18.50000,-5.25000,-13.75000,5.81250,-10.32143,6.07317,0.79710,9.87640,-4.73469,-8.73196,7.56322,-8.88636,-3.13793,-1.12500,-8.01587,-0.74074,16.46939,1.92857,-7.08333,-26.83333,3.00000]
    */
    #[test]
    fn example3() {
        let root = slice_to_tree(&[-40,0,-37,17,-87,-13,62,82,-57,45,-52,3,-22,-55,-54,11,-2,60,69,-21,23,36,-100,6,-80,93,-55,67,78,-22,-70,-44,1337,17,-38,77,-13,97,-22,66,-42,89,-69,-51,-2,-16,-72,-29,-49,-13,76,1337,1337,-56,-79,-4,84,-79,-71,-58,1337,-59,71,-20,38,1337,1337,27,-47,46,42,-19,66,84,-4,1337,1337,1337,1337,1337,1337,78,-28,-3,12,21,-27,1337,39,-15,-99,51,-14,38,78,56,-24,58,59,42,24,-26,18,-63,1337,-3,77,1337,1337,-52,1337,74,-55,1337,-91,-80,-86,-23,1337,11,-60,-84,1337,1337,1337,1337,1337,-59,-45,-13,1337,90,-3,-38,-5,1,-1,-90,1337,53,-57,-25,32,-94,-52,-31,-90,65,85,23,62,1337,1337,70,-15,22,-37,7,26,81,94,23,48,-82,96,-91,-12,67,5,61,59,25,-45,-25,88,-20,64,-18,-55,42,-59,21,-69,-2,-36,34,17,1337,1337,-20,14,41,19,1337,1337,84,-55,-68,-88,98,-29,-46,10,97,-92,10,1337,1337,98,-31,76,1337,1337,-29,1337,-12,-52,-21,-14,59,75,31,1337,89,1337,70,1337,4,1337,61,53,62,23,25,27,-62,-52,1337,-99,1337,1337,88,88,63,1337,1337,1337,1337,1337,-43,1337,-92,23,-49,53,68,-44,-73,-95,81,21,-77,39,-41,-62,3,25,1337,1337,1337,1337,1337,-44,1337,1337,63,1337,-54,-13,1337,1337,-83,52,-57,29,78,62,83,1337,54,1337,74,53,1337,8,33,66,32,21,1337,51,-94,25,5,16,1337,-81,1337,1337,1337,1337,1337,1337,-28,17,76,18,85,1337,-65,1337,1337,1337,1337,1337,75,1337,-26,49,69,-9,-51,1337,-11,1337,1337,3,-38,0,-61,-43,60,1337,1337,79,1337,-84,1337,1337,-81,-38,-43,20,-97,-72,1337,1337,1337,53,38,1337,69,1337,-67,38,1337,1337,1337,1337,1337,-67,-91,-96,81,44,1337,1337,-97,1337,1337,1337,33,51,60,1337,1337,1337,1337,49,1337,1337,-6,1337,-63,1337,1337,71,1337,1337,1337,-34,1337,1337,-58,98,50,-85,6,23,-34,93,-52,83,20,-9,33,1337,-26,-85,-36,-56,26,-13,-35,-73,-17,-97,-42,86,42,1337,95,67,1337,63,1337,1337,1337,1337,25,1337,1337,1337,1337,-90,-59,8,86,1337,1337,1337,-89,19,31,68,-32,1337,1337,-84,1337,1337,-59,1337,1337,86,-56,1337,1337,-20,-26,-11,37,1337,12,1337,1337,1337,-9,80,1337,-27,1337,58,-37,1337,73,1337,1337,1337,-70,-75,-17,1337,1337,1337,1337,1337,-46,1337,1337,15,1337,-75,74,43,54,43,-35,1337,-14,1337,-22,1337,1337,1337,1337,-96,66,1337,-8,-8,1337,1337,1337,1337,-74,1337,-43,-33,25,1337,-43,-49,98,97,-36,46,1337,-81,-62,-2,1337,1337,1337,1337,1337,-53,-6,-59,1337,1337,1337,1337,-16,1337,1337,1337,1337,1337,1337,1337,1337,1337,1337,1337,1337,1337,1337,1337,1337,-49,12,22,98,1337,1337,1337,45,33,0,1337,1337,-95,91,-80,-88,-17,1337,83,38,1337,-99,-21,1337,1337,-81,-61,87,41,-35,37,19,-37,-12,7,1337,-52,-93,62,-31,-18,-57,-29,-67,-73,57,3,-33,1337,-79,-74,94,2,1337,-85,-87,95,1337,1337,1337,1337,63,1337,1337,1337,1337,1337,18,1337,-74,1337,-3,-96,1337,46,27,-26,82,24,-96,1337,1337,1337,1337,46,1337,1337,1337,1337,37,1337,1337,1337,4,-5,9,11,-86,1337,-13,1337,1337,1337,-68,1337,1337,6,1337,1337,1337,1337,1337,1337,1337,1337,1337,1337,1337,71,24,3,1337,-74,1337,1337,1337,1337,-66,-61,82,-47,1337,1337,1337,93,1337,1337,1337,1337,61,1337,-71,1337,1337,1337,1337,1337,1337,1337,1337,1337,1337,1337,-93,64,-67,1337,97,45,1337,1337,1337,1337,1337,32,-61,1337,-53,1337,-14,-9,-91,1337,93,-71,1337,1337,42,1337,1337,1337,1337,57,1337,1337,1337,1337,1337,-2,1337,1337,-1,43,1337,1337,1337,-30,1337,1337,50,36,89,-72,1337,86,-7,-87,-94,72,1337,2,71,7,1337,1337,1337,45,-6,-2,-79,8,32,36,-98,-40,77,0,1337,-19,1337,29,78,1337,1337,-58,1337,47,86,1337,1337,90,1337,1337,-14,1337,-1,1337,-65,49,1337,1337,72,70,1337,1337,1337,1337,1337,90,1337,1337,-51,50,-73,-46,-34,5,7,1337,1337,35,1337,1337,1337,1337,1337,1337,32,1337,1337,1337,1337,-41,99,1337,-98,-90,1337,45,1337,1337,1337,1337,1337,99,1337,-6,1337,1337,1337,-20,1337,1337,38,2,21,78,1337,1337,1337,1337,-30,1337,1337,-36,1337,-5,68,1337,40,-33,-92,1337,1337,17,1337,1337,83,1337,1337,1337,1337,33,1337,1337,1337,1337,-20,-95,1337,1337,-68,1337,-9,-9,7,21,-47,71,-97,1337,1337,1337,30,1337,1337,-69,1337,1337,-42,1337,-65,1337,40,98,1337,1337,6,1337,-27,95,-26,-100,1337,1337,75,1337,6,-77,1337,1337,1337,1337,-14,1337,1337,70,1337,1337,80,1337,1337,1337,1337,1337,1337,1337,-59,1337,74,1337,30,1337,-71,29,1337,-4,-8,-55,-79,-91,19,14,34,1337,-62,1337,5,22,-38,1337,1337,1337,1337,1337,1337,-57,1337,1337,1337,1337,51,8,14,-17,-7,-79,-65,-68,69,50,-100,91,-1,66,31,28,1337,19,-50,62,23,4,17,-83,-84,2,-22,1337,1337,1337,1337,1337,9,37,-79,1337,23,1337,1337,1337,1337,1337,-74,11,-2,1337,1337,1337,1337,1337,1337,1337,1337,-74,1337,1337,-78,1337,30,1337,-82,1337,-51,1337,1337,1337,1337,1337,59,-90,1337,-8,1337,1337,1337,1337,1337,88,1337,3,1337,1337,1337,1337,57,1337,1337,1337,1337,1337,1337,1337,-26,1337,1337,-62,1337,1337,1337,1337,75,1337,1337,1337,83,52,1337,-31,1337,1337,-78,1337,-71,9,87,34,1337,51,28,1337,1337,-54,14,1337,1337,-25,-11,80,1337,1337,-20,-40,1337,1337,1337,1337,-28,1337,1337,1337,-94,-46,1337,-3,1337,37,-70,-22,1337,1337,-89,-28,1,83,41,18,-9,1337,-46,61,1337,89,-17,-29,1337,-32,-78,-20,15,1337,72,1337,-38,7,1337,1337,1337,-13,50,-81,1337,26,70,-94,1337,1337,-76,-3,52,20,1337,91,40,91,1337,1337,1337,1337,1337,1337,32,1337,1337,1337,40,37,29,-53,-45,-98,-57,-53,1337,1337,1337,7,93,-37,-64,-65,1337,92,-47,58,13,1337,1337,1337,1337,1337,67,-48,1337,-33,-46,1337,1337,1337,-65,1337,1337,1337,1337,1337,-49,-85,-58,1337,1337,62,1337,1337,1337,1337,1337,1337,1337,1337,-33,1337,1337,1337,-47,1337,1337,1337,1337,1337,1337,-37,1337,1337,-91,-100,1337,1337,1337,1337,1337,-59,1337,27,1337,1337,1337,42,1337,1337,1337,1337,-59,1337,1337,1337,-25,38,20,-60,1337,1337,1337,-1,-16,1337,1337,1337,1337,1337,1337,-15,-10,75,27,86,-2,-43,38,1337,1337,-82,1337,1337,1337,1337,1337,80,75,60,89,-11,1337,1337,1337,15,-93,75,55,-89,1337,1337,1337,1337,51,-40,1337,1337,-22,1337,1337,1337,1337,-49,-24,68,1337,1337,85,78,1337,1337,-96,29,51,74,-93,1337,1337,36,-26,1337,1337,3,-65,1337,65,1337,70,1337,1337,1337,-81,-74,87,1337,1337,1337,-54,39,99,-72,1337,1337,8,-14,1337,1337,1337,1337,-96,90,1337,1337,51,-61,1337,-67,1337,1337,1337,-65,1337,1337,-41,21,1337,1337,1337,1337,51,1337,1337,1337,1337,1337,1337,1337,1337,1337,1337,-26,1337,1337,1337,-95,-52,1337,1337,1337,1337,1337,1337,1337,1337,1337,1337,1337,97,1337,-73,1337,76,-52,4,1337,1337,57,-85,43,64,1337,1337,1337,1337,1337,1337,1337,62,41,-100,-64,1337,75,1337,-99,1337,-43,1337,1337,-64,-23,-68,1337,1337,1337,71,-12,-62,93,18,1337,-3,-66,96,-99,30,1337,32,-41,-25,1337,1337,41,1337,1337,1337,1337,1337,1337,-32,-56,-32,0,1337,49,1337,1337,1337,1337,-85,-60,53,1337,1337,1337,-90,99,6,62,1337,1337,-52,1337,1337,1337,-51,-4,1337,1337,1337,-94,-94,1337,-48,1337,1337,1337,1337,99,1337,1337,1337,-93,1337,-63,14,1337,1337,-83,32,1337,41,1337,1337,74,1337,1337,1337,1337,49,1337,80,1337,1337,1337,1337,1337,1337,1337,1337,1337,1337,50,1337,-53,1337,-71,1337,1337,1337,1337,1337,1337,1337,1337,-71,-51,48,1337,1337,31,1337,1337,26,7,1337,1337,-60,1337,1337,1337,22,1337,1337,90,1337,1337,83,1337,1337,-84,-100,-18,1337,1337,1337,-81,1337,-9,-60,1337,-97,1337,-56,46,-56,88,-26,1337,1337,-76,1337,95,1337,1337,1337,53,-34,1337,7,65,1337,1337,1337,-63,-44,16,1337,1337,-28,1337,-40,89,5,-87,-95,99,11,-18,-13,59,1337,1337,1337,1337,13,19,1337,-24,70,91,1337,20,16,1337,1337,1337,1337,1337,1337,1337,94,1337,1337,1337,1337,62,1337,1337,1337,1337,1337,1337,38,1337,68,14,42,1337,1337,84,75,1337,56,1337,-58,1337,89,-72,15,-59,-98,-66,1337,33,-33,27,-13,1337,1337,1337,1337,77,1337,1337,1337,1337,-39,1337,94,-29,1337,1337,1337,1337,1337,1337,53,1337,-73,88,1337,1337,1337,1337,1337,35,1337,1337,1337,57,53,1337,-47,1337,77,9,1337,-17,-16,1337,41,-48,60,89,78,-75,1337,1337,10,-89,39,1337,-41,1337,1337,1337,-21,84,1337,1337,56,12,1337,64,1337,1337,1337,1337,1337,1337,1337,1337,1337,1337,84,1337,1337,1337,1337,1337,1337,1337,1337,1337,1337,1337,1337,84,-75,1337,1337,1337,-23,1337,1337,1337,1337,1337,1337,1337,61,1337,1337,89,1337,1337,1337,1337,1337,1337,-40,1337,1337,1337,1337,-57,1337,1337,1337,1337,-95,1337,1337,1337,-97,1337,1337,1337,1337,1337,1337,1337,-77,0,1337,1337,1337,1337,1337,1337,1337,1337,-30,1337,1337,67,-56,52,1337,-29,1337,1337,-20,81,1337,-55,-27,74,79,32,1337,1337,-33,-17,96,1337,1337,1337,1337,1337,1337,1337,86,-16,1337,1337,1337,1337,-68,1337,1337,1337,1337,1337,1337,34,1337,1337,1337,10,1337,1337,1337,1337,1337,1337,1337,1337,1337,1337,1337,-85,1337,56,22,-5,-77,1337,1337,1337,1337,-82,1337,1337,1337,1337,1337,1337,1337,1337,1337,81,1337,1337,1337,51,1337,1337,-22,1337,1337,1337,1337,1337,1337,1337,1337,1337,1337,-82,1337,72,1337,1337,1337,-30,1,1337,1337,1337,-37,1337,1337,1337,1337,-85,1337,1337,1337,1337,1337,1337,1337,1337,1337,1337,1337,3], 1337);

        let a = Solution::average_of_levels(root);

        judge(&a, &[-40.00000,-18.50000,-5.25000,-13.75000,5.81250,-10.32143,6.07317,0.79710,9.87640,-4.73469,-8.73196,7.56322,-8.88636,-3.13793,-1.12500,-8.01587,-0.74074,16.46939,1.92857,-7.08333,-26.83333,3.00000]);
    }

    
}